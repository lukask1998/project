/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ULL;

import java.util.LinkedList;
import java.util.List;


/**
 *
 * @author Lukas
 */
public class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        
        ULLTest();
        SpeedTest();
        
    }

    private static void ULLTest() {
        
        ULL<Integer> unrolled = new KTUULL<>(4);
        
        //print unrolled linked list
        unrolled.print(null);
        
        //add 0 - 10 numbers to unrolled linkest list
        for (int i = 0; i <= 20; i++) {
            unrolled.add(i);
        }
        
        //print unrolled linked list
        unrolled.print("after adding number 0 - 11");
        
        //adding number 55 to unrolled linked list
        unrolled.add(55);
        
        //print unrolled linked list
        unrolled.print("after adding number 55");
        
        //adding number 56 to unrolled linked list
        unrolled.add(56);
        
        //print unrolled linked list
        unrolled.print("after adding number 56");
        
        //remove number 1 from unrolled linked list
        unrolled.remove(0);
        unrolled.remove(56);
        
        //print unrolled linked list
        unrolled.print("after removing numbers 0, 56");
        
        //does unrolled linked contain number 5?
        System.out.println("Contains number 5: " + unrolled.contains(5));
        System.out.println("Contains number 10: " + unrolled.contains(10));
        System.out.println("Contains number 56: " + unrolled.contains(56));
        
    }

    private static void SpeedTest() {
        
        System.out.println("");
        System.out.println("SPEED TEST - linkedList vs unrolledLinkedList(3) vs unrolledLinkedList(8)");
        System.out.println("--------------------------------------------------------------------------");
        
        List<Integer> linkedList = new LinkedList();
        ULL<Integer> unrolled = new KTUULL<>(3);
        ULL<Integer> unrolled2 = new KTUULL<>(8);
        
        long startTime;
        long endTime;
        
        //linkedList add
        startTime = System.nanoTime();
        for (int i = 0; i <= 2000; i++) {
            linkedList.add(i);
        }
        endTime = System.nanoTime();
        System.out.println("LL add: " + (endTime - startTime));
        
        //unrolledLinkedList(3) add
        startTime = System.nanoTime();
        for (int i = 0; i <= 2000; i++) {
            unrolled.add(i);
        }
        endTime = System.nanoTime();
        System.out.println("ULL(3) add: " + (endTime - startTime));
        
        //unrolledLinkedList(8) add
        startTime = System.nanoTime();
        for (int i = 0; i <= 2000; i++) {
            unrolled2.add(i);
        }
        endTime = System.nanoTime();
        System.out.println("ULL(8) add: " + (endTime - startTime));
        
        //linkedList remove
        startTime = System.nanoTime();
        linkedList.remove(0);
        endTime = System.nanoTime();
        System.out.println("LL remove: " + (endTime - startTime));
        
        //unrolledLinkstList(3) remove
        startTime = System.nanoTime();
        unrolled.remove(0);
        endTime = System.nanoTime();
        System.out.println("ULL(3) remove: " + (endTime - startTime));
        
        //unrolledLinkedList(8) remove
        startTime = System.nanoTime();
        unrolled2.remove(0);
        endTime = System.nanoTime();
        System.out.println("ULL(8) remove: " + (endTime - startTime));
        
        //linkedList contains
        startTime = System.nanoTime();
        linkedList.contains(500);
        endTime = System.nanoTime();
        System.out.println("LL contains: " + (endTime - startTime));
        
        //unrolledLinkedList(3) contains
        startTime = System.nanoTime();
        unrolled.contains(500);
        endTime = System.nanoTime();
        System.out.println("ULL(3) contains: " + (endTime - startTime));
        
        //unrolledLinkedList(8) contains
        startTime = System.nanoTime();
        unrolled2.contains(500);
        endTime = System.nanoTime();
        System.out.println("ULL(8) contains: " + (endTime - startTime));
        
        System.out.println("--------------------------------------------------------------------------");
        
    }
    
}
